@model BikeBuddy.ViewModels.AdminDashboardViewModel
@{
    Layout = "_AdminLayout";
    ViewData["Title"] = "Admin Home";
}

<div class="flex  min-h-screen bg-gray-100 overflow-x-hidden">
    <div class="grid grid-cols-1 sm:grid-cols-2 gap-8 max-w-7xl w-full px-8 h-100 mt-5">
        <!-- Total Bikes -->
        <div class="bg-[#D9D9D9] p-10 rounded-lg shadow-lg transform transition-transform hover:scale-105">
            <div class="flex items-center mb-6">
                <img alt="Bike Icon" class="h-16 w-16" src="~/Images/bike.png" />
                <h2 class="ml-6 text-3xl font-bold">
                    Total Bikes
                </h2>
            </div>
            <p class="text-5xl font-bold mb-6">
                @Model.TotalBikes
            </p>
            <div class="flex justify-between">
                <div>
                    <p class="text-gray-700">
                        Approved
                    </p>
                    <p class="text-2xl font-bold">
                        @Model.ApprovedBikes
                    </p>
                </div>
                <div>
                    <p class="text-gray-700">
                        Pending
                    </p>
                    <p class="text-2xl font-bold">
                        @Model.PendingBikes
                    </p>
                </div>
                <div>
                    <p class="text-gray-700">
                        Rejected
                    </p>    
                    <p class="text-2xl font-bold">
                        @Model.RejectedBikes
                    </p>
                </div>
            </div>
        </div>
        <!-- Total Users -->
        <div class="bg-[#D9D9D9] p-10 rounded-lg shadow-lg transform transition-transform hover:scale-105 h=100">
            <div class="flex items-center mb-6">
                <img alt="User Icon" class="h-16 w-16" src="~/Images/UserIcon.jpeg" />
                <h2 class="ml-6 text-3xl font-bold">
                    Total Users
                </h2>
            </div>
            <p class="text-5xl font-bold mb-6">
                @Model.TotalUsers
            </p>
            <div class="flex justify-between">
                <div>
                    <p class="text-gray-700">
                        Kyc Users
                    </p>
                    <p class="text-2xl font-bold">
                        @Model.KycUsers
                    </p>
                </div>
                <div>
                    <p class="text-gray-700">
                        Non Kyc Users
                    </p>
                    <p class="text-2xl font-bold">
                        @Model.NonKycUsers
                    </p>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Graphs Section -->
<div class="mt-8 px-8 max-w-7xl w-full">
    <h2 class="text-3xl font-bold mb-6">Monthly Trends</h2>

    <!-- Monthly User Registrations Graph -->
    <div class="bg-[#D9D9D9] p-10 rounded-lg shadow-lg transform transition-transform hover:scale-105 mt-8">
        <h3 class="text-2xl font-bold mb-6">Monthly User Registrations</h3>
        <canvas id="userRegistrationChart" width="400" height="200" style="background-color: #f0f0f0;"></canvas>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    // Fetch user registration data from the controller
    fetch('@Url.Action("GetMonthlyUserRegistrationData", "Admin")')
        .then(response => response.json())
        .then(data => {
            const months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
            const userCounts = Array(12).fill(0); // Initialize array with 12 months (set all counts to 0)

            // Process the data to map the registration counts to the corresponding month
            data.forEach(entry => {
                if (entry.Month >= 1 && entry.Month <= 12) {
                    userCounts[entry.Month - 1] = entry.Count; // Fill the count for the given month (entry.Month - 1 for zero-based index)
                }
            });

            // Get the canvas element for the chart
            const ctx = document.getElementById('userRegistrationChart').getContext('2d');

            // Create the chart
            new Chart(ctx, {
                type: 'bar', // Use bar chart type
                data: {
                    labels: months, // Labels for each month
                    datasets: [{
                        label: 'Users Registered', // Label for the dataset
                        data: userCounts, // Data array (userCounts)
                        backgroundColor: 'rgba(75, 192, 192, 0.5)', // Bar color
                        borderColor: 'rgba(75, 192, 192, 1)', // Border color for bars
                        borderWidth: 1 // Border width
                    }]
                },
                options: {
                    responsive: true, // Make the chart responsive
                    plugins: {
                        legend: {
                            position: 'top' // Position the legend at the top
                        },
                        tooltip: {
                            callbacks: {
                                label: function (context) {
                                    return context.dataset.label + ': ' + context.raw; // Display the count in tooltip
                                }
                            }
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true // Ensure the y-axis starts from 0
                        }
                    }
                }
            });
        })
        .catch(error => {
            console.error('Error loading chart data:', error); // Log any errors that occur during data fetch
        });
</script>

